using Mcd.HospitalManagement.Web.Enums;
using Mcd.HospitalManagement.Web.Models;
using Mcd.HospitaManagementSystem.Business;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;

namespace Mcd.HospitalManagement.Web.Controllers
{
    public class DoctorRecommendationController : Controller
    {
        #region private fields
        IDoctorRecommendationManager doctorRecommendationManager;
        IPatientManager patietManager;
        #endregion

        #region Constructors
        public DoctorRecommendationController()
        {
            this.doctorRecommendationManager = new DoctorRecommendationManager();
            patietManager = new PatientManager();
        }
        #endregion

        public ActionResult Index()
        {
            //checking the permissions
            if ((string)Session["USERROLE"] == null)
            {
                return RedirectToAction("AccessDenied", "Error",
                    new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }

            if ((UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Admin ||
                (UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Cashier)
            {

                IEnumerable<DoctorRecommendationDTO> doctorRecommendationList = doctorRecommendationManager.GetDoctorRecommendationDetails();

                IEnumerable<DoctorRecommendationModel> doctorRecommendationModelList = doctorRecommendationList.Select(m => new DoctorRecommendationModel
                {
                    CurrentDoctorId = m.CurrentDoctorId,
                    CurrentDoctorName = m.CurrentDoctorName,
                    PatientId = m.PatientId,
                    PatientName = m.PatientName,
                    Reason = m.Reason,
                    RecomendedDoctorId = m.RecomendedDoctorId,
                    RecomendedDoctorName = m.RecomendedDoctorName,
                    Id = m.Id

                });

                return View(doctorRecommendationModelList);
            }
            else
            {
                return RedirectToAction("AccessDenied", "Error",
                    new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }
        }

        /// <summary>
        /// Doctor's patient transfering details are stored in the DB
        /// </summary>
        /// <param name="details">Transfer Patient details</param>
        /// <returns>Redirecting to the HomePage</returns>
        //public ActionResult SaveTransferDoctorDetails(DoctorRecommendationModel details)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        DoctorRecommendationDTO doctorDTO = new DoctorRecommendationDTO
        //        {
        //            Id = details.Id,
        //            CurrentDoctorId = details.CurrentDoctorId,
        //            Reason = details.Reason,
        //            RecomendedDoctorId = details.RecomendedDoctorId,
        //            PatientId = details.PatientId
        //        };

        //        doctorRecommendationManager.SaveTransferDoctorDetails(doctorDTO);
        //        return RedirectToAction("Index", "DoctorRecommendation");
        //    }
        //    return View(details);

        //}

        [HttpGet]
        public ActionResult UpdateDoctorRecommendationDetails(int id)
        {
            //checking the permissions
            if ((string)Session["USERROLE"] == null)
            {
                return RedirectToAction("AccessDenied", "Error",
                    new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }

            if ((UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Admin ||
                (UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Cashier)
            {

                //Getting info about DoctorRecommendations using it's ID
                DoctorRecommendationDTO doctorRecommendation = doctorRecommendationManager.GetDoctorRecommendationById(id);

                //Mapping DTO into Model
                DoctorRecommendationModel doctor = new DoctorRecommendationModel
                {
                    Id = doctorRecommendation.Id,
                    CurrentDoctorName = doctorRecommendation.CurrentDoctorName,
                    CurrentDoctorId = doctorRecommendation.CurrentDoctorId,
                    PatientId = doctorRecommendation.PatientId,
                    PatientName = doctorRecommendation.PatientName,
                    Reason = doctorRecommendation.Reason,
                    RecomendedDoctorId = doctorRecommendation.RecomendedDoctorId,
                    RecomendedDoctorName = doctorRecommendation.RecomendedDoctorName
                };

                return View(doctor);
            }
            else
            {
                return RedirectToAction("AccessDenied", "Error",
                    new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }
        }

        [HttpPost]
        public ActionResult UpdateDoctorRecommendationDetails(DoctorRecommendationDTO doctorRecommendation)
        {
            //checking the permissions
            if ((string)Session["USERROLE"] == null)
            {
                return RedirectToAction("AccessDenied", "Error",
                    new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }

            if ((UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Admin ||
                (UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Cashier)
            {

                string displayMessage = string.Empty;
                PatientAdmissionDTO patientAdmissionFirst = patietManager.GetPatientDetailId(doctorRecommendation.PatientId); // get  patient Detail Id by max admit date
                PatientAdmissionDTO patientAdmissionDTO = patietManager.ViewPatientAdmissionDetails(patientAdmissionFirst.PatientDetailId); // get all patient details


                AllPatientDTO patientAllAdmissionDTO = new AllPatientDTO()
                {
                    PatientDetailId = patientAdmissionDTO.PatientDetailId,
                    AdmitDate = patientAdmissionDTO.AdmitDate,
                    BedId = patientAdmissionDTO.BedId,
                    WardId = patientAdmissionDTO.WardId,
                    DoctorId = doctorRecommendation.RecomendedDoctorId,
                    PatientId = (int)doctorRecommendation.PatientId,
                    IsDischarged = patientAdmissionDTO.IsDischarged,
                };
                if (patietManager.EditPatientAdmissionDetails(patientAllAdmissionDTO))
                    displayMessage = CustomEnumMessage.GetStringValue(ConfirmationMessages.ConfirmationUpdatedMsg);
                else
                    displayMessage = CustomEnumMessage.GetStringValue(ConfirmationMessages.ConfirmationErrorMsg);
                return Json(new { Message = displayMessage });
                //return View();
            }
            else
            {
                return RedirectToAction("AccessDenied", "Error",
                    new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }
        }

        public ActionResult RemoveDoctorRecommendationDetails(int id)
        {
            //checking the permissions
            if ((string)Session["USERROLE"] == null)
            {
                return RedirectToAction("AccessDenied", "Error",
                    new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }

            if ((UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Admin ||
                (UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Cashier)
            {
                bool confirmationResult = doctorRecommendationManager.RemoveDoctorRecommendationDetails(id);
                return View();
            }
            else
            {
                return RedirectToAction("AccessDenied", "Error",
                    new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }
        }


    }
}