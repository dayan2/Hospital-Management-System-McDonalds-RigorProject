#region Using Directives
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Mcd.HospitaManagementSystem.Business;
using Mcd.HospitalManagement.Web.Models;
using Mcd.HospitalManagement.Web.Enums;
#endregion

namespace Mcd.HospitalManagement.Web.Controllers
{
    public class PatientMedicalTestsController : Controller
    {
        #region Private Fields
        IPatientManager dbPatient;
        INurse dbNurse;
        IHMSMedicalTestType dbMedicalTest;
        IPatientMedicalTestAllocation dbMedicalTestAllocation;
        #endregion

        public PatientMedicalTestsController()
        {
            dbPatient = new PatientManager();
            dbNurse = new HMSNurse();
            dbMedicalTest = new HMSMedicalTestType();
            dbMedicalTestAllocation = new PatientMedicalTestAllocation();
        }

        #region Public Methods

        // GET: PatientMedicalTests
        public ActionResult Index()
        {

            return View();
        }

        //// GET: PatientMedicalTests/Details/5
        //public ActionResult Details(int? id)
        //{

        //    }
        //    return View();
        //}

        //// GET: PatientMedicalTests/Create
        //public ActionResult Create()
        //{

        //    return View();
        //}
        [HttpPost]
        public ActionResult Create(int patientDetailsId, int medicalTestId, int nurseId)
        {
            PatientMedicalTestDTO patientDto = new PatientMedicalTestDTO
                   {
                       MedicalTestId = Convert.ToInt32(medicalTestId),
                       NurseId = Convert.ToInt32(nurseId),
                       PatientDetailId = Convert.ToInt32(patientDetailsId)
                   };
            if (ModelState.IsValid)
            {
                if (!dbMedicalTestAllocation.CheckExistsMedicalTestForPatientAdmission(patientDto))
                {
                    ViewBag.Message = CustomEnumMessage.GetStringValue(PatientMedicalTestError.AlreadyExistPatientMedicalTest);
                    //return View();
                    return Json(new { Message = "this Medical Test already Exists for this patient" });
                }
                if (dbMedicalTestAllocation.InsertPatientMedicalTest(patientDto))
                    return Json(new { Message = "Success" });
            }
            return Json(new { Message = "Data is not valid" });
            // return View();
        }

        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Create([Bind(Include = "Id,PatientDetailId,MedicalTestId,NurseId")] PatientMedicalTestModel patientMedicalTest)
        //{
        // PatientMedicalTestDTO patientDto =  new PatientMedicalTestDTO
        //        {
        //            MedicalTestId = patientMedicalTest.MedicalTestId,
        //            NurseId = patientMedicalTest.NurseId,
        //            PatientDetailId = patientMedicalTest.PatientDetailId
        //        };
        //    if (ModelState.IsValid)
        //    {
        //        if (!dbMedicalTestAllocation.CheckExistsMedicalTestForPatientAdmission(patientDto))
        //        {
        //            ViewBag.Message = CustomEnumMessage.GetStringValue(PatientMedicalTestError.AlreadyExistPatientMedicalTest);
        //            return View(patientMedicalTest);
        //            //return Json(new { Message = "Exists" });
        //        }
        //        dbMedicalTestAllocation.InsertPatientMedicalTest(patientDto);
        //       return RedirectToAction("Index");
        //    }
        //    //return Json(new { Message = "sucuess" });
        //   return View(patientMedicalTest);
        //}

        public ActionResult ViewPatientMedicalTest()
        {
            IEnumerable<PatientMedicalTestDTO> patientMedicalTestDto = dbMedicalTestAllocation.ViewtPatientMedicalTest();
            if (patientMedicalTestDto == null)
            {
                ViewBag.Result = "No records";
                return View();
            }
            IEnumerable<PatientMedicalTestModel> patientMedicalTestModel = patientMedicalTestDto.Select(m => new PatientMedicalTestModel
          {
              Id = m.Id,
              MedicalTestId = m.MedicalTestId,
              NurseId = m.NurseId,
              NurseName = m.NurseName,
              MedicalTestDescription = m.MedicalTest,
              PatientDetailId = m.PatientDetailId,
              PatientName = m.PatientName
          }).ToList();

            return View(patientMedicalTestModel);
        }

        public ActionResult Create(int? id)
        {
            if (id == null)
            {
                return HttpNotFound();
            }

            PatientMedicalTestModel patientMedicalTest = new PatientMedicalTestModel();
            List<SelectListItem> medicalTestList = new List<SelectListItem>();
            List<SelectListItem> nurseList = new List<SelectListItem>();
            var nurses = dbNurse.ViewtNurse();
            foreach (var n in nurses)
            {
                nurseList.Add(new SelectListItem
                {
                    Text = n.Name,
                    Value = n.Id.ToString()
                });
            }

            var medicalTest = dbMedicalTest.ViewtMedicalTestType();
            foreach (var m in medicalTest)
            {
                medicalTestList.Add(new SelectListItem
                {
                    Value = m.Id.ToString(),
                    Text = m.Description
                });
            }

            //ViewBag.PatientDetailId = new SelectList(patientModel, "Id", "Name", 0);
            // ViewBag.NurseId = new SelectList(nurseModel, "Id", "Name");
            // ViewBag.MedicalTestId = new SelectList(medicalTestModel, "Id", "Description");

            PatientAdmissionDTO patientDetatilDto = dbPatient.getPatientDetailId(id);
            PatientAdmissionDetailsModel patientDetailsModel = new PatientAdmissionDetailsModel
            {
                AdmitDate = patientDetatilDto.AdmitDate,
                IsDischarged = patientDetatilDto.IsDischarged,
                PatientDetailId = patientDetatilDto.PatientDetailId
            };
            patientMedicalTest.PatientDetailId = patientDetatilDto.PatientDetailId;
            patientMedicalTest.PatientAdmissionDetails = patientDetailsModel;
            patientMedicalTest.Nurse = nurseList;
            patientMedicalTest.MedicalTestType = medicalTestList;
            return View(patientMedicalTest);
        }

        // GET: PatientMedicalTests/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            
            PatientMedicalTestModel patientMedicalTest = new PatientMedicalTestModel();
            List<SelectListItem> medicalTestList = new List<SelectListItem>();
            List<SelectListItem> nurseList = new List<SelectListItem>();
            var nurses = dbNurse.ViewtNurse();
            foreach (var n in nurses)
            {
                nurseList.Add(new SelectListItem
                {
                    Text = n.Name,
                    Value = n.Id.ToString()
                });
            }

            var medicalTest = dbMedicalTest.ViewtMedicalTestType();
            foreach (var m in medicalTest)
            {
                medicalTestList.Add(new SelectListItem
                {
                    Value = m.Id.ToString(),
                    Text = m.Description
                });
            }
                       
            PatientMedicalTestDTO patientMedicalDTO=  dbMedicalTestAllocation.ViewtPatientMedicalTestById(id);
            patientMedicalTest.Id = patientMedicalDTO.Id;
            patientMedicalTest.MedicalTestId = patientMedicalDTO.MedicalTestId;
            patientMedicalTest.NurseId = patientMedicalDTO.NurseId;
            patientMedicalTest.PatientDetailId = patientMedicalDTO.PatientDetailId;
            patientMedicalTest.PatientName = patientMedicalDTO.PatientName;
            //patientMedicalTest.PatientAdmissionDetails = patientDetailsModel;
            patientMedicalTest.Nurse = nurseList;
            patientMedicalTest.MedicalTestType = medicalTestList;
            return View(patientMedicalTest);
        }

        // POST: PatientMedicalTests/Edit/5
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,PatientDetailId,MedicalTestId,NurseId")] PatientMedicalTestModel patientMedicalTest)
        {
            if (ModelState.IsValid)
            {
                PatientMedicalTestDTO patientMedicalDto = new PatientMedicalTestDTO { 
                Id=patientMedicalTest.Id,
                NurseId=patientMedicalTest.NurseId,
                PatientDetailId=patientMedicalTest.PatientDetailId,
                MedicalTestId=patientMedicalTest.MedicalTestId
                };
                if (!dbMedicalTestAllocation.CheckExistsMedicalTestForPatientAdmission(patientMedicalDto))
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest,"Already exists");
                }
                dbMedicalTestAllocation.EditPatientMedicalTest(patientMedicalDto);
                return RedirectToAction("ViewPatientMedicalTest");
            }
           
            return View(patientMedicalTest);
        }

        // GET: PatientMedicalTests/Delete/5
        public ActionResult Delete(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            if (!dbMedicalTestAllocation.ExistsPatientMedicalTest((int)id))
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);

            PatientMedicalTestDTO patientMedicalTest= dbMedicalTestAllocation.ViewtPatientMedicalTestById(id);

            if (patientMedicalTest == null)
            {
                return HttpNotFound();
            }

            PatientMedicalTestModel patientMedicalTestModel = new PatientMedicalTestModel {
                Id = patientMedicalTest.Id,
                MedicalTestDescription=patientMedicalTest.MedicalTest,
                MedicalTestId=patientMedicalTest.MedicalTestId,
                NurseId=patientMedicalTest.NurseId,
                NurseName=patientMedicalTest.NurseName,
                PatientName=patientMedicalTest.PatientName,
                PatientDetailId=patientMedicalTest.PatientDetailId
            
            };
            return View(patientMedicalTestModel);
        }

        // POST: PatientMedicalTests/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            if (!dbMedicalTestAllocation.ExistsPatientMedicalTest(id))
                return HttpNotFound();

            dbMedicalTestAllocation.DeletePatientMedicalTest(id);

            return RedirectToAction("ViewPatientMedicalTest");
        }

       

        [HttpPost]
        public ActionResult RenderPatientDetailsGrid(string name)
        {

            IEnumerable<PatientDTO> patientDetialsDTOList = dbMedicalTestAllocation.FindPatientDetails(name);

            if (patientDetialsDTOList == null)
            {
                ViewBag.Result = "null";
            }

            IEnumerable<PatientModel> PatientModel = patientDetialsDTOList.Select(m => new PatientModel
                  {
                      Id = m.Id,
                      Address = m.Address,
                      Name = m.Name,
                      NIC = m.NIC
                  }).ToList();


            return PartialView("_PatientMedicalTest", PatientModel);
        }
        #endregion

    }
}