#region Using Directives
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Mcd.HospitaManagementSystem.Business;
using Mcd.HospitalManagement.Web.Models;
using Mcd.HospitalManagement.Web.Enums;
#endregion
namespace Mcd.HospitalManagement.Web.Controllers
{
    /// <summary>
    /// This controller handling Nurse related all details
    /// </summary>
    public class NursesController : Controller
    {
        #region Private Fields
        INurse dbNurse;
        IWards dbWard;
        #endregion



        #region Constructor_Method
        public NursesController()
        {
            this.dbNurse = new HMSNurse();
            this.dbWard = new WardManager();
        }
        //public NursesController(INurse nurse)
        //{
        //    this.dbNurse = nurse;
        //}
        // GET: Nurses
        #endregion

        #region Public Methods
        // view all nurses datails
        public ActionResult Index()
        {
            IEnumerable<NurseDTO> nurseDto = dbNurse.ViewtNurse();
            IEnumerable<NurseModel> nurseModel = DTOLToModelListMapper(nurseDto);
            return View(nurseModel);
        }

        // GET: Nurses/Details/5
        public ActionResult Details(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }


            if (dbNurse.CheckExistsNurse(id) == false)
            {
                return HttpNotFound();
            }
            NurseDTO nurseDto = dbNurse.ViewtNurseById(id);
            NurseModel Nurse = DTOToModelMapper(nurseDto);

            WardDTO wardDto = dbWard.ViewWardById((int)nurseDto.WardId);
            WardModel wordModel = new WardModel
            {
                Id = wardDto.Id,
                WardNo = wardDto.WardNo
            };
            Nurse.Ward = wordModel;
            // IEnumerable<Nurse> nurse = new List<Nurse> {new Nurse{Id=nurses.Id, Name=nurses.Name, WardId=nurses.WardId} };
            return View(Nurse);
        }

        // GET: Nurses/Create
        public ActionResult Create()
        {
            //List<Ward> w = new List<Ward> { new Ward { Id = 7, WardNo = "Ward1" } };        // Dummy Data
            //IEnumerable<Ward> Wards = w;                                                    // Dummy Data

            //ViewBag.WardId = new SelectList(Wards, "Id", "WardNo");
            //IEnumerable<WardDTO> Wards =dbWard.ViewWardDetails();

            //NurseModel nurseModel = new NurseModel();
            NurseModel nurseModel = new NurseModel();
            IEnumerable<WardDTO> wardList = dbWard.ViewWardDetails();

            nurseModel.Wards = wardList.Select(m => new WardModel
            {
                Id = m.Id,
                WardNo = m.WardNo
            }).ToList();

            ViewBag.WardId = new SelectList(wardList, "Id", "WardNo");
            return View(nurseModel);
        }


        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "Id,Name,WardId")] NurseModel nurse)
        {
            NurseDTO nurseDto = ModelToDTOMapper(nurse);
            if (ModelState.IsValid)
            {
                dbNurse.InsertNurse(nurseDto);
                return RedirectToAction("Index");
            }

            // ViewBag.WardId = new SelectList(db.Wards, "Id", "WardNo", nurse.WardId);
            return View(nurse);
        }

        // GET: Nurses/Edit/5
        public ActionResult Edit(int? id)
        {
            if (id == null)
            {
                return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
            }
            NurseDTO nurseDto = dbNurse.ViewtNurseById(id);
            if (nurseDto == null)
            {
                return HttpNotFound();
            }

            IEnumerable<WardDTO> wardList = dbWard.ViewWardDetails();

            NurseModel nurseModel = DTOToModelMapper(nurseDto);

            ViewBag.WardId = new SelectList(wardList, "Id", "WardNo", nurseModel.WardId);
            nurseModel.Wards = wardList.Select(m => new WardModel
            {
                Id = m.Id,
                WardNo = m.WardNo
            }).ToList();
            return View(nurseModel);
        }

        // POST: Nurses/Edit/5

        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Edit([Bind(Include = "Id,Name,WardId")] NurseModel nurse)
        {
            NurseDTO nurseDto = new NurseDTO { Id = nurse.Id, Name = nurse.Name, WardId = nurse.WardId };
            if (ModelState.IsValid)
            {
                dbNurse.EditNurse(nurseDto);
                return RedirectToAction("Index");
            }
            // ViewBag.WardId = new SelectList(db.Wards, "Id", "WardNo", nurse.WardId);
            return View(nurse);
        }

        // GET: Nurses/Delete/5
        public ActionResult Delete(int? id)
        {
            if ((UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Admin)
            {
                if (id == null)
                {
                    return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
                }
                NurseDTO nurseDto = dbNurse.ViewtNurseById(id);
                if (nurseDto == null)
                {
                    return HttpNotFound();
                }
                NurseModel Nurse = new NurseModel
                {
                    Id = nurseDto.Id,
                    Name = nurseDto.Name,
                    WardId = nurseDto.WardId,
                    WardNo = nurseDto.WardNo
                };
                return View(Nurse);
            }
            else
            {
                return RedirectToAction("AccessDenied", "Error", new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }
        }

        // POST: Nurses/Delete/5
        [HttpPost, ActionName("Delete")]
        [ValidateAntiForgeryToken]
        public ActionResult DeleteConfirmed(int id)
        {
            if ((UserRoleEnum)Enum.Parse(typeof(UserRoleEnum), Session["USERROLE"].ToString()) == UserRoleEnum.Admin)
            {
                NurseDTO nurse = dbNurse.ViewtNurseById(id);
                if (nurse == null)
                {
                    return HttpNotFound();
                }
                dbNurse.DeleteNurse(id);
                return RedirectToAction("Index");
            }
            else
            {
                return RedirectToAction("AccessDenied", "Error", new { ErrorMessage = CustomEnumMessage.GetStringValue(PageStatusEnum.AccessDenied) });
            }
        }

        #endregion

        #region Private Methods
        private NurseDTO ModelToDTOMapper(NurseModel nurseModel)
        {
            NurseDTO nurseDto = new NurseDTO
            {
                Id = nurseModel.Id,
                Name = nurseModel.Name,
                WardId = nurseModel.WardId,
                WardNo = nurseModel.WardNo
            };
            return nurseDto;
        }


        // Nurse model to Nurse DTO to mapping data
        private NurseModel DTOToModelMapper(NurseDTO nurseDto)
        {
            NurseModel nurseModel = new NurseModel
            {
                Id = nurseDto.Id,
                Name = nurseDto.Name,
                WardId = nurseDto.WardId,
                WardNo = nurseDto.WardNo
            };
            return nurseModel;
        }

        // Nurse DTO  to Nurse model to mapping data
        private IEnumerable<NurseModel> DTOLToModelListMapper(IEnumerable<NurseDTO> NurseDtoList)
        {
            IEnumerable<NurseModel> NurseModelList = NurseDtoList.Select(m => new NurseModel
            {
                Id = m.Id,
                Name = m.Name,
                WardId = m.WardId,
                WardNo = m.WardNo
            }).ToList();
            return NurseModelList;
        }
        // From Nurse DTO List  to Nurse model List to mapping data
        private IEnumerable<NurseDTO> ModelToDTOListMapper(IEnumerable<NurseModel> NurseModelList)
        {
            IEnumerable<NurseDTO> NurseDtoList = NurseModelList.Select(m => new NurseDTO
            {
                Id = m.Id,
                Name = m.Name,
                WardId = m.WardId,
                WardNo = m.WardNo
            }).ToList();
            return NurseDtoList;
        }


        #endregion
    }
}
