using Mcd.HospitalManagementSystem.Data;
using System;
using System.Collections.Generic;
using System.Data.Entity;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Mcd.HospitaManagementSystem.Business
{
    public class PatientMedicalTestAllocation : IPatientMedicalTestAllocation
    {
        #region Public Methods

        public void InsertPatientMedicalTest(PatientMedicalTestDTO patientMedicalTestDTO)
        {
            try
            {

                using (LP_HMSDbEntities db = new LP_HMSDbEntities())
                {
                    PatientMedicalTest patientMedicalTest = new PatientMedicalTest
                    {
                        //Id = patientMedicalTestDTO.Id,
                        MedicalTestId = patientMedicalTestDTO.MedicalTestId,
                        PatientDetailId = patientMedicalTestDTO.PatientDetailId,
                        NurseId = patientMedicalTestDTO.NurseId
                    };

                    db.PatientMedicalTests.Add(patientMedicalTest);
                    db.SaveChanges();
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public void EditPatientMedicalTest(PatientMedicalTestDTO patientMedicalTestDTO)
        {
            try
            {
                using (LP_HMSDbEntities db = new LP_HMSDbEntities())
                {
                    PatientMedicalTest patientMedicalTest = new PatientMedicalTest
                    {
                        Id = patientMedicalTestDTO.Id,
                        MedicalTestId = patientMedicalTestDTO.MedicalTestId,
                        PatientDetailId = patientMedicalTestDTO.PatientDetailId,
                        NurseId = patientMedicalTestDTO.NurseId
                    };

                    db.Entry(patientMedicalTest).State = EntityState.Modified;
                    db.SaveChanges();
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public void DeletePatientMedicalTest(int patientMedicalTestId)
        {
            try
            {
                using (LP_HMSDbEntities db = new LP_HMSDbEntities())
                {
                    PatientMedicalTest patientMedicalTest = db.PatientMedicalTests.Find(patientMedicalTestId);
                    db.PatientMedicalTests.Remove(patientMedicalTest);
                    db.SaveChanges();
                }

            }
            catch (Exception ex)
            {

                throw ex;
            }
        }

        public IEnumerable<PatientMedicalTestDTO> ViewtPatientMedicalTest()
        {
            try
            {
                using (LP_HMSDbEntities db = new LP_HMSDbEntities())
                {
                    //IEnumerable<PatientMedicalTestDTO> patientMedicalTestDTO = db.Patients.Join(db.PatientDetails.Where(d=>d.IsDischarged==false), 
                    //       p => p.Id, pd => pd.PatientId, ((p, pd) => new { p, pd })).
                    //       Join(db.PatientMedicalTests, ppd => ppd.pd.PatientDetailId, pm => pm.PatientDetailId, ((ppd, pm) => new { ppd, pm })).
                    //       Join(db.MedicalTestTypes, pdm => pdm.pd.MedicalTestId, mt => mt.Id, ((pdm, mt) => new { pdm, mt })).

                    //       .Select(m => new PatientMedicalTestDTO
                    //       {
                    //           Id = m.pm.Id,                              
                    //           NurseId = m.pm.NurseId,
                    //           PatientDetailId = m.pm.PatientDetailId,
                    //           NurseName = m.
                    //       }).ToList();

                    //if (patientMedicalTestDTO.Count() > 0)
                    //{
                    //    return patientMedicalTestDTO;
                    //}
                    return null;
                }
            }
            catch (Exception)
            {

                throw;
            }
        }

        public PatientMedicalTestDTO ViewtPatientMedicalTestById(int? patientMedicalTestId)
        {
            return null;
        }

        public IEnumerable<PatientDTO> FindPatientDetails(string name)
        {
            try
            {
                using (LP_HMSDbEntities db = new LP_HMSDbEntities())
                {
                    IEnumerable<PatientDTO> patientDto = db.Patients.Where(c => c.Name.Contains(name))
                          .Select(m => new PatientDTO
                          {
                              Id = m.Id,
                              Name = m.Name,
                              NIC = m.NIC,
                              Address = m.Address
                          }).ToList();

                    return patientDto;
                }
            }
            catch (Exception ex)
            {

                throw ex;
            }

        }

        public bool CheckExistsMedicalTestForPatientAdmission(PatientMedicalTestDTO patientMedicalTestDTO)
        {
            try
            {
                using (LP_HMSDbEntities db = new LP_HMSDbEntities())
                {   
                    // check already exists. one patient admission have only unique medical test. but patient admission can different medical test
                    if (db.PatientMedicalTests.Where(x=>x.MedicalTestId==patientMedicalTestDTO.MedicalTestId && 
                        x.PatientDetailId==patientMedicalTestDTO.PatientDetailId).ToList().Count>0)
                    {
                        return false;
                    }
                    return true;
                }
                
            }
            catch (Exception)
            {

                throw;
            }
        }

        #endregion
    }
}
