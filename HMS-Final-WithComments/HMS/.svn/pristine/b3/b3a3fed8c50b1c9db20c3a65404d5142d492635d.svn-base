using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Linq;
using System.Net;
using System.Web;
using System.Web.Mvc;
using Mcd.HospitalManagementSystem.Data;
using Mcd.HospitaManagementSystem.Business;
using Mcd.HospitalManagement.Web.Models;
 
namespace Mcd.HospitalManagement.Web.Controllers
{
    public class PatientFeedbackController : Controller
    {
        private LP_HMSDbEntities db = new LP_HMSDbEntities();
        IDoctorManager doctors;
        IPatientManager patientManager;
        PatientModel patient;
        DoctorModel doctorModel;


        public PatientFeedbackController()
        {
            patientManager = new PatientManager();
          
            doctors = new DoctorManager();

        }

        // GET: /PatientFeedback/
        //public ActionResult Index()
        //{
        //    var patientfeedbacks = db.PatientFeedbacks.Include(p => p.Doctor).Include(p => p.PatientDetail);
        //    return View(patientfeedbacks.ToList());
        //}

        //// GET: /PatientFeedback/Details/5
        //public ActionResult Details(int? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    PatientFeedback patientfeedback = db.PatientFeedbacks.Find(id);
        //    if (patientfeedback == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    return View(patientfeedback);
        //}

        // GET: /PatientFeedback/Create
        public ActionResult Create()
        {
            //get patient details
            patient = new PatientModel();
            var patients = patientManager.fillPatients();
            IEnumerable<PatientModel> PList = patients.Select(c => new PatientModel
                                        
                                              {
                                                  Id = c.Id,
                                                  Name = c.Name,
                                              });


          
            ViewBag.PatientId = new SelectList(PList, "Id", "Name");
            return View();
        }

        // POST: /PatientFeedback/Create
        // To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        // more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        [HttpPost]
        [ValidateAntiForgeryToken]
        public ActionResult Create([Bind(Include = "id,PatientId,DoctorId,PatientDetailId,FeedbackDate,FeedbackDescription")] PatientFeedbackModel patientfeedback, int PatientId)
        {
            //get patient details
            patient = new PatientModel();
            var patients = patientManager.fillPatients();
            IEnumerable<PatientFeedbackModel> PList = from c in patients
                                                      select new PatientFeedbackModel
                                              {
                                                 PatientId= c.Id,
                                                  PatientName = c.Name,
                                              };
            if (String.IsNullOrEmpty(PatientId.ToString()))
            {
                throw new ArgumentNullException("PatientId");
            }

            var doctors = patientManager.ViewDoctorAccordingToPatientId(PatientId);
            IEnumerable<PatientFeedbackModel> doctorList = doctors.Select(x => new PatientFeedbackModel
            
                                                    {
                                                        DoctorId=(int)x.DoctorId,
                                                        DoctorName=x.DoctorName

                                                    }).ToList();
          
            return PartialView("PatientFeedBackDetails", doctorList);

        //var cc= patientManager.getPatientDetailId(patientfeedback.PatientId);
       
        //    var patientFeedBack = new PatientFeedbackDTO()
        //    {
               
        //        DoctorId=patientfeedback.DoctorId,
        //        PatientDetailId=cc.PatientDetailId,
        //        FeedbackDate=patientfeedback.FeedbackDate,
        //        FeedbackDescription=patientfeedback.FeedbackDescription
                
        //    };

        //    if (ModelState.IsValid)
        //    {
        //        patientManager.InsertPatientFeedBack(patientFeedBack);
        //        //db.PatientFeedbacks.Add(patientfeedback);
        //        //db.SaveChanges();
        //        return RedirectToAction("Index");
        //    }

           
            //ViewBag.PatientDetailId = new SelectList(db.PatientDetails, "PatientDetailId", "PatientDetailId", patientfeedback.PatientDetailId);
            //return View(patientfeedback);
        }

        //// GET: /PatientFeedback/Edit/5
        //public ActionResult Edit(int? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    PatientFeedback patientfeedback = db.PatientFeedbacks.Find(id);
        //    if (patientfeedback == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    ViewBag.DoctorId = new SelectList(db.Doctors, "Id", "Name", patientfeedback.DoctorId);
        //    ViewBag.PatientDetailId = new SelectList(db.PatientDetails, "PatientDetailId", "PatientDetailId", patientfeedback.PatientDetailId);
        //    return View(patientfeedback);
        //}

        //// POST: /PatientFeedback/Edit/5
        //// To protect from overposting attacks, please enable the specific properties you want to bind to, for 
        //// more details see http://go.microsoft.com/fwlink/?LinkId=317598.
        //[HttpPost]
        //[ValidateAntiForgeryToken]
        //public ActionResult Edit([Bind(Include="id,DoctorId,PatientDetailId,FeedbackDate,FeedbackDescription")] PatientFeedback patientfeedback)
        //{
        //    if (ModelState.IsValid)
        //    {
        //        db.Entry(patientfeedback).State = EntityState.Modified;
        //        db.SaveChanges();
        //        return RedirectToAction("Index");
        //    }
        //    ViewBag.DoctorId = new SelectList(db.Doctors, "Id", "Name", patientfeedback.DoctorId);
        //    ViewBag.PatientDetailId = new SelectList(db.PatientDetails, "PatientDetailId", "PatientDetailId", patientfeedback.PatientDetailId);
        //    return View(patientfeedback);
        //}

        //// GET: /PatientFeedback/Delete/5
        //public ActionResult Delete(int? id)
        //{
        //    if (id == null)
        //    {
        //        return new HttpStatusCodeResult(HttpStatusCode.BadRequest);
        //    }
        //    PatientFeedback patientfeedback = db.PatientFeedbacks.Find(id);
        //    if (patientfeedback == null)
        //    {
        //        return HttpNotFound();
        //    }
        //    return View(patientfeedback);
        //}

        //// POST: /PatientFeedback/Delete/5
        //[HttpPost, ActionName("Delete")]
        //[ValidateAntiForgeryToken]
        //public ActionResult DeleteConfirmed(int id)
        //{
        //    PatientFeedback patientfeedback = db.PatientFeedbacks.Find(id);
        //    db.PatientFeedbacks.Remove(patientfeedback);
        //    db.SaveChanges();
        //    return RedirectToAction("Index");
        //}

        //protected override void Dispose(bool disposing)
        //{
        //    if (disposing)
        //    {
        //        db.Dispose();
        //    }
        //    base.Dispose(disposing);
        //}
    }
}
